tags:
  - ctrl_flow
  - ctx_switch

# Instructions
#
# The opcode is the index of each instruction. Stack before and after
# instruction is only for documenting purpose. The elements are
# specified from bottom to top. E.g:
#
#   stack_before: [a, b]
#   stack_after: [b-a]
#
# will be
#		       
#   +---------+	                  
#   |    b    |	       	       	  
#   +---------+   ==>  	+---------+
#   |    a    |		|   b-a   |
#   +---------+		+---------+
#

instructions:
  -
    name: ret
    tags: [ctx_switch, ctrl_flow]
    desc: Return from a procedure.
    operands: []
    stack_before: []
    stack_after: []
    code: |
      pctx = ctx.prev
      ctx.vm.ctx = pctx
      if pctx is not None:
          retval = ctx.pop()
          pctx.push(retval)

  -
    name: call
    tags: [ctx_switch, ctrl_flow]
    desc: Call a procedure.
    operands: [argc]
    stack_before: [..., proc]
    stack_after: [retval]
    code: |
      argc = get_param(ctx, 1)
      
      proc = ctx.pop()

      nctx = Context(ctx.vm, proc)
      i = 0
      while i < argc:
          nctx.locals[i] = ctx.pop()
          i += 1

      ctx.ip += $(insn_len)
      ctx.vm.ctx = nctx

  -
    name: push_local
    tags: []
    desc: Push value of a local variable to operand stack.
    operands: [local]
    stack_before: []
    stack_after: [value]
    code: |
      idx = get_param(ctx, 1)
      loc = ctx.locals[idx]
      ctx.push(loc)

  -
    name: set_local
    tags: []
    desc: Pop the stack top and assign it to a local variable.
    operands: [local]
    stack_before: [value]
    stack_after: []
    code: |
      idx = get_param(ctx, 1)
      val = ctx.pop()
      ctx.locals[idx] = val

  -
    name: push_local_depth
    tags: []
    desc: Push value of a local in lexical parent to operand stack.
    operands: [depth, local]
    stack_before: []
    stack_after: [value]
    code: |
      depth = get_param(ctx, 1)
      idx = get_param(ctx, 2)

      pctx = ctx
      while depth > 0:
          pctx = pctx.parent
          depth -= 1
      loc = pctx.locals[idx]
      ctx.push(loc)

  -
    name: set_local_depth
    tags: []
    desc: Pop a value and assign to a local variable of lexical parent.
    operands: [depth, local]
    stack_before: [value]
    stack_after: []
    code: |
      depth = get_param(ctx, 1)
      idx = get_param(ctx, 2)
      value = ctx.pop()

      pctx = ctx
      while depth > 0:
          pctx = pctx.parent
          depth -= 1
      pctx.locals[idx] = value

  -
    name: push_literal
    tags: []
    desc: Push a literal to operand stack.
    operands: [literal]
    stack_before: []
    stack_after: [value]
    code: |
      idx = get_param(ctx, 1)
      lit = ctx.proc.literals[idx]
      ctx.push(lit)

  -
    name: push_0
    tags: []
    desc: Push 0 to operand stack.
    operands: []
    stack_before: []
    stack_after: [0]
    code: |
      ctx.push(0)

  -
    name: push_1
    tags: []
    desc: Push 1 to operand stack.
    operands: []
    stack_before: []
    stack_after: [0]
    code: |
      ctx.push(1)

  -
    name: push_nil
    tags: []
    desc: Push None to oeprand stack.
    operands: []
    stack_before: []
    stack_after: [None]
    code: |
      ctx.push(None)

  -
    name: dup
    tags: []
    desc: Duplicate the stack top object.
    operands: []
    stack_before: []
    stack_after: [value]
    code: |
      ctx.push(ctx.top())

  -
    name: plus
    tags: []
    desc: Performan arithmetic +
    operands: []
    stack_before: [a, b]
    stack_after: [b+a]
    code: |
      res = ctx.pop() + ctx.pop()
      ctx.push(res)

  -
    name: minus
    tags: []
    desc: Performan arithmetic -
    operands: []
    stack_before: [a, b]
    stack_after: [b-a]
    code: |
      res = ctx.pop() - ctx.pop()
      ctx.push(res)

  -
    name: multiply
    tags: []
    desc: Performan arithmetic *
    operands: []
    stack_before: [a, b]
    stack_after: [b*a]
    code: |
      res = ctx.pop() * ctx.pop()
      ctx.push(res)

  -
    name: divide
    tags: []
    desc: Performance arithmetic /
    operands: []
    stack_before: [a, b]
    stack_after: [b/a]
    code: |
      res = ctx.pop() / ctx.pop()
      ctx.push(res)

  -
    name: test_equal
    tags: []
    desc: Test equality.
    operands: []
    stack_before: [a, b]
    stack_after: [b==a]
    code: |
      res = (ctx.pop() == ctx.pop())
      ctx.push(res)

  -
    name: goto
    tags: [ctrl_flow]
    desc: Unconditional jump.
    operands: [ip]
    stack_before: []
    stack_after: []
    code: |
      ip = get_param(ctx, 1)
      ctx.ip = ip

  -
    name: goto_if_true
    tags: [ctrl_flow]
    desc: Jump if the stack top is true.
    operands: [ip]
    stack_before: [condition]
    stack_after: []
    code: |
      ip = get_param(ctx, 1)
      cond = ctx.pop()
      if cond is True:
          ctx.ip = ip
      else:
          ctx.ip += $(insn_len)

  -
    name: goto_if_not_true
    tags: [ctrl_flow]
    desc: Jump if the stack top is not true.
    operands: [ip]
    stack_before: [condition]
    stack_after: []
    code: |
      ip = get_param(ctx, 1)
      cond = ctx.pop()
      if cond is not True:
          ctx.ip = ip
      else:
          ctx.ip += $(insn_len)

  -
    name: make_lambda
    tags: []
    desc: Create a procedure.
    operands: []
    stack_before: [proc]
    stack_after: [lambda]
    code: |
      proc = ctx.top()
      proc.lexical_parent = ctx
